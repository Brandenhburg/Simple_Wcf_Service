//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CustomerService
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BankDatabaseContainer : DbContext
    {
        public BankDatabaseContainer()
            : base("name=BankDatabaseContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CurrentAccount> CurrentAccounts { get; set; }
        public virtual DbSet<SavingsAccount> SavingsAccounts { get; set; }
    
        public virtual int spBankDatabase_DeleteCustomer(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBankDatabase_DeleteCustomer", customerIdParameter);
        }
    
        public virtual int spBankDatabase_AddNewCustomer(string firstName, string lastName, string email, string joinedOnDate, Nullable<decimal> currentAccountBalance, Nullable<decimal> savingsAccountBalance)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var joinedOnDateParameter = joinedOnDate != null ?
                new ObjectParameter("JoinedOnDate", joinedOnDate) :
                new ObjectParameter("JoinedOnDate", typeof(string));
    
            var currentAccountBalanceParameter = currentAccountBalance.HasValue ?
                new ObjectParameter("CurrentAccountBalance", currentAccountBalance) :
                new ObjectParameter("CurrentAccountBalance", typeof(decimal));
    
            var savingsAccountBalanceParameter = savingsAccountBalance.HasValue ?
                new ObjectParameter("SavingsAccountBalance", savingsAccountBalance) :
                new ObjectParameter("SavingsAccountBalance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBankDatabase_AddNewCustomer", firstNameParameter, lastNameParameter, emailParameter, joinedOnDateParameter, currentAccountBalanceParameter, savingsAccountBalanceParameter);
        }
    
        public virtual int spBankDatabase_WithdrawalFromCurrentAccount(Nullable<int> customerId, Nullable<decimal> funds)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var fundsParameter = funds.HasValue ?
                new ObjectParameter("Funds", funds) :
                new ObjectParameter("Funds", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBankDatabase_WithdrawalFromCurrentAccount", customerIdParameter, fundsParameter);
        }
    
        public virtual int spBankDatabase_DepositToCurrentAccount(Nullable<int> customerId, Nullable<decimal> funds)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var fundsParameter = funds.HasValue ?
                new ObjectParameter("Funds", funds) :
                new ObjectParameter("Funds", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBankDatabase_DepositToCurrentAccount", customerIdParameter, fundsParameter);
        }
    
        public virtual int spBankDatabase_DepositToSavingsAccount(Nullable<int> customerId, Nullable<decimal> funds)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var fundsParameter = funds.HasValue ?
                new ObjectParameter("Funds", funds) :
                new ObjectParameter("Funds", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBankDatabase_DepositToSavingsAccount", customerIdParameter, fundsParameter);
        }
    
        public virtual int spBankDatabase_WithdrawalFromSavingsAccount(Nullable<int> customerId, Nullable<decimal> requestedFunds)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var requestedFundsParameter = requestedFunds.HasValue ?
                new ObjectParameter("RequestedFunds", requestedFunds) :
                new ObjectParameter("RequestedFunds", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBankDatabase_WithdrawalFromSavingsAccount", customerIdParameter, requestedFundsParameter);
        }
    
        public virtual ObjectResult<CustomerInfo_Result> spBankDatabase_GetFilteredCustomers(string column, string enteredParam)
        {
            var columnParameter = column != null ?
                new ObjectParameter("Column", column) :
                new ObjectParameter("Column", typeof(string));
    
            var enteredParamParameter = enteredParam != null ?
                new ObjectParameter("EnteredParam", enteredParam) :
                new ObjectParameter("EnteredParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerInfo_Result>("spBankDatabase_GetFilteredCustomers", columnParameter, enteredParamParameter);
        }
    
        public virtual ObjectResult<spBankDatabase_GetCustomersInfo_Result> spBankDatabase_GetCustomersInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spBankDatabase_GetCustomersInfo_Result>("spBankDatabase_GetCustomersInfo");
        }
    
        public virtual ObjectResult<spBankDatabase_FilterCustomers_Result> spBankDatabase_FilterCustomers(string column, string subStringValue)
        {
            var columnParameter = column != null ?
                new ObjectParameter("Column", column) :
                new ObjectParameter("Column", typeof(string));
    
            var subStringValueParameter = subStringValue != null ?
                new ObjectParameter("SubStringValue", subStringValue) :
                new ObjectParameter("SubStringValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spBankDatabase_FilterCustomers_Result>("spBankDatabase_FilterCustomers", columnParameter, subStringValueParameter);
        }
    
        public virtual int spBankDatabase_CreateNewCustomer_AllowDuplicates(string firstName, string lastName, string email, string joinedOnDate, Nullable<decimal> currentAccountBalance, Nullable<decimal> savingsAccountBalance)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var joinedOnDateParameter = joinedOnDate != null ?
                new ObjectParameter("JoinedOnDate", joinedOnDate) :
                new ObjectParameter("JoinedOnDate", typeof(string));
    
            var currentAccountBalanceParameter = currentAccountBalance.HasValue ?
                new ObjectParameter("CurrentAccountBalance", currentAccountBalance) :
                new ObjectParameter("CurrentAccountBalance", typeof(decimal));
    
            var savingsAccountBalanceParameter = savingsAccountBalance.HasValue ?
                new ObjectParameter("SavingsAccountBalance", savingsAccountBalance) :
                new ObjectParameter("SavingsAccountBalance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBankDatabase_CreateNewCustomer_AllowDuplicates", firstNameParameter, lastNameParameter, emailParameter, joinedOnDateParameter, currentAccountBalanceParameter, savingsAccountBalanceParameter);
        }
    }
}
